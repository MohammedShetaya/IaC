name: Creating a Dev Environment per PR

on:
  pull_request:
    branches:
      - main
    paths:
      - 'api/**'

      
jobs:
  create:
    name: 'Create a Development Env'
    defaults:
      run:
        shell: bash
    environment: Dev
    runs-on: ubuntu-latest
    
    steps:


    # checkout to the branch that contains the infra files
    - name: Checkout the Repo to the infra branch
      uses: actions/checkout@v2
      with:
        ref: infra
      
    
    # settup terraform on the runner machine
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with: 
        terraform_version: 1.5.5
        cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}
    
    # create a new file from the image saved in infra/development/development_instance.tf.example
    # return the newly created instance file name and the output expected from terraform
    - name: Create Dev Instance Resource File
      id: create-resource-file
      working-directory: infra/development/
      run: |
        chmod +x create_instance_resource.sh
        OUTPUT="$(./create_instance_resource.sh PR_${{ github.event.pull_request.number }} | jq -r .resource_id)"
        ls -l
        echo "RESOURCE_ID=$OUTPUT" >> $GITHUB_OUTPUT
    
    - name: Terraform Init and Validate
      id: terraform-init
      working-directory: infra/development/
      run: |
        terraform init
        terraform validate -no-color
    
    - name: Terraform Plan
      id: terraform-plan
      working-directory: infra/development/
      run: terraform plan -no-color
    
    # apply the changes of that plan once successful
    - name: Terraform Apply 
      id: terraform-apply
      working-directory: infra/development/
      run: terraform apply -auto-approve

    # extract the dns of the instance from the outputs of the terraform run
    - name: Extract Instance DNS
      id: terraform-output
      working-directory: infra/development/
      run: |
        terraform output development_dns_${{ steps.create-resource-file.outputs.RESOURCE_ID }}
    
    - name: any
      run: echo ${{ steps.terraform-output.outputs.stdout }}
      
    # run the server api
    - name: SSH TEST  
      run: |
        echo $INSTANCE_PRIVATE_KEY > key.pem
        ssh -i "key.pem" "$INSTANCE_USER@$INSTANCE_DNS"
      env:
        INSTANCE_PRIVATE_KEY: ${{ secrets.INSTANCE_PRIVATE_KEY }}
        INSTANCE_USER: ${{ secrets.INSTANCE_USER }}
        INSTANCE_DNS: ${{ steps.terraform-output.outputs.stdout }}
    
    # checkout to the new pr
    - name: Checkout to New PR
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.ref }}


    - name: 'Deploy to New Instance'
      uses: burnett01/rsync-deployments@23a557dceb19f9bb960ef40cf75cab5e9b37ec1f
      with:
        switches: -avzr --delete
        path: ./api
        remote_path: /var/
        remote_host: ${{ steps.terraform-output.outputs.stdout }}
        remote_user: ${{ secrets.INSTANCE_USER }}
        remote_key: ${{ secrets.INSTANCE_PRIVATE_KEY }}

    # run the server api
    - name: Run Server
      uses: JimCronqvist/action-ssh@7737f1192ddd8376686e9d6354dea44592c942bf
      with:
        hosts: '${{ secrets.INSTANCE_USER }}@${{ steps.terraform-output.outputs.stdout }}'
        privateKey: ${{ secrets.INSTANCE_PRIVATE_KEY }}
        command: |
          cd /var/api
          npm ci
          npm start

    # test the api by sending an http request on /hello
    - name: Test API
      run: curl "${{ steps.terraform-output.outputs.stdout }}/hello"

    # checkout back to the branch that contains the infra files
    - name: Checkout back to the infra branch
      uses: actions/checkout@v2
      with:
        ref: infra  

    # destroy the the infra as it is used for this PR only
    - name: Destroy Infrastructure
      id: infra-destroy
      working-directory: infra/development/
      run: terraform destroy -auto-approve








